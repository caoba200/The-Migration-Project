    else if (HAL9000Message.parameter1 == "CLONE")
    {
        process = CloneProcessImage (cpuProcess);
        if (process.pid != itos (-1))
        {
            if (GetRandomNoFromZeroTo (2) == 0)
            {
                SetSystemCallParameters (cpuProcess, "", "", "", "", process.pid, "CLONE_OK");
                readyQueue.Enqueue (cpuProcess);
                SetSystemCallParameters (process, "", "", "", "", itos (0), "CLONE_OK");
                readyQueue.Enqueue (process);
            }
            else
            {
                SetSystemCallParameters (process, "", "", "", "", itos (0), "CLONE_OK");
                readyQueue.Enqueue (process);
                SetSystemCallParameters (cpuProcess, "", "", "", "", process.pid, "CLONE_OK");
                readyQueue.Enqueue (cpuProcess);
            }
        }
        else
        {
            SetSystemCallParameters (cpuProcess, "", "", "", "", "", "CLONE_FAILED");
            readyQueue.Enqueue (cpuProcess);
        }
    }
    else if (HAL9000Message.parameter1 == "RUN")
    {
        process = ReplaceProcessImage (cpuProcess, HAL9000Message.parameter3, HAL9000Message.parameter4);
        if (process.pid != itos (-1))
        {
            cpuProcess.action = "PROCESS_DONE";
            UpdatePartitionTable (cpuProcess.pid, cpuProcess.action);
            if (cpuProcess.type == "FOREGROUND_PROCESS" && process.type == "BACKGROUND_PROCESS")
            {
                SendReturnStatusToHALshell (cpuProcess.pid, "", "foreground process image replaced by background process image");
            }
            SetSystemCallParameters (process, "", "", "", "", "", "");
            readyQueue.Enqueue (process);
        }
        else
        {
            SetSystemCallParameters (cpuProcess, "", "", "", "", "", "RUN_FAILED");
            readyQueue.Enqueue (cpuProcess);
        }
    }

    cpuProcess = NullProcess ();

    return;
}
